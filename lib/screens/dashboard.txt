import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../components/custom_app_bar.dart';
import '../components/app_drawer.dart';
import '../providers/user_provider.dart';
import '../models/user_model.dart';
import 'package:intl/intl.dart';

class DashboardScreen extends StatelessWidget {
  const DashboardScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomAppBar(
        title: 'Dashboard',
        onLogout: () {
          // Clear user data and navigate to login
          Provider.of<UserProvider>(context, listen: false).clearUser();
          Navigator.pushReplacementNamed(context, '/');
        },
        onDashboard: () {
          // Already on dashboard, do nothing
        },
      ),
      drawer: const AppDrawer(),
      body: Consumer<UserProvider>(
        builder: (context, userProvider, child) {
          final user = userProvider.currentUser;
          
          if (user == null) {
            return const Center(
              child: Text('Please log in to view your dashboard'),
            );
          }
          
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildWelcomeSection(context, user),
                const SizedBox(height: 24),
                _buildStatsSection(context, user),
                const SizedBox(height: 24),
                _buildRecentQuizzesSection(context, user),
                const SizedBox(height: 24),
                _buildRecommendedSection(context, user),
                const SizedBox(height: 24),
                _buildAchievementsSection(context, user),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildWelcomeSection(BuildContext context, UserModel user) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          children: [
            CircleAvatar(
              radius: 40,
              backgroundColor: const Color(0xFF8D6E63),
              child: Text(
                user.name.substring(0, 1).toUpperCase(),
                style: const TextStyle(
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Welcome back, ${user.name}!',
                    style: Theme.of(context).textTheme.displayMedium,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Ready to test your historical knowledge today?',
                    style: Theme.of(context).textTheme.bodyLarge,
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () {
                      Navigator.pushNamed(context, '/era_selection');
                    },
                    child: const Text('Start a New Quiz'),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatsSection(BuildContext context, UserModel user) {
    // Calculate average score
    double averageScore = 0;
    if (user.quizHistory.isNotEmpty) {
      averageScore = user.quizHistory.map((q) => q.percentage).reduce((a, b) => a + b) / user.quizHistory.length;
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Your Stats',
          style: Theme.of(context).textTheme.displayMedium,
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: _buildStatCard(
                context,
                'Total Points',
                user.totalPoints.toString(),
                Icons.stars,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: _buildStatCard(
                context,
                'Quizzes Taken',
                user.quizHistory.length.toString(),
                Icons.quiz,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: _buildStatCard(
                context,
                'Avg. Score',
                '${averageScore.toStringAsFixed(1)}%',
                Icons.analytics,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildStatCard(BuildContext context, String title, String value, IconData icon) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Column(
          children: [
            Icon(
              icon,
              size: 32,
              color: const Color(0xFF8D6E63),
            ),
            const SizedBox(height: 8),
            Text(
              value,
              style: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Color(0xFF5D4037),
              ),
            ),
            const SizedBox(height: 4),
            Text(
              title,
              style: const TextStyle(
                fontSize: 14,
                color: Color(0xFF8D6E63),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRecentQuizzesSection(BuildContext context, UserModel user) {
    if (user.quizHistory.isEmpty) {
      return const SizedBox.shrink();
    }

    // Sort quiz history by date (most recent first)
    final sortedHistory = List<QuizAttempt>.from(user.quizHistory)
      ..sort((a, b) => b.date.compareTo(a.date));

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Recent Quizzes',
          style: Theme.of(context).textTheme.displayMedium,
        ),
        const SizedBox(height: 16),
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: sortedHistory.length > 3 ? 3 : sortedHistory.length,
          itemBuilder: (context, index) {
            final quiz = sortedHistory[index];
            return Card(
              margin: const EdgeInsets.only(bottom: 12),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
              child: ListTile(
                contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                title: Text(
                  quiz.quizTitle,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const SizedBox(height: 4),
                    Text(
                      'Score: ${quiz.score}/${quiz.totalQuestions} (${quiz.percentage.toStringAsFixed(0)}%)',
                    ),
                    Text(
                      'Date: ${DateFormat('MMM d, yyyy').format(quiz.date)}',
                      style: const TextStyle(fontSize: 12),
                    ),
                  ],
                ),
                trailing: CircularProgressIndicator(
                  value: quiz.score / quiz.totalQuestions,
                  backgroundColor: Colors.grey[300],
                  valueColor: AlwaysStoppedAnimation<Color>(
                    quiz.percentage >= 70 ? Colors.green : Colors.orange,
                  ),
                ),
              ),
            );
          },
        ),
        if (user.quizHistory.length > 3)
          Center(
            child: TextButton(
              onPressed: () {
                // Navigate to a full history page (not implemented in this example)
              },
              child: const Text('View All Quizzes'),
            ),
          ),
      ],
    );
  }

  Widget _buildRecommendedSection(BuildContext context, UserModel user) {
    // In a real app, these would be generated based on user preferences and history
    final recommendedQuizzes = [
      {
        'title': 'Ancient Rome',
        'description': 'Test your knowledge about the Roman Empire',
        'difficulty': 'Medium',
        'questions': 10,
      },
      {
        'title': 'Medieval Europe',
        'description': 'Explore the Middle Ages in European history',
        'difficulty': 'Hard',
        'questions': 15,
      },
      {
        'title': 'American Revolution',
        'description': 'Learn about the founding of the United States',
        'difficulty': 'Easy',
        'questions': 8,
      },
    ];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Recommended for You',
          style: Theme.of(context).textTheme.displayMedium,
        ),
        const SizedBox(height: 16),
        SizedBox(
          height: 180,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: recommendedQuizzes.length,
            itemBuilder: (context, index) {
              final quiz = recommendedQuizzes[index];
              return Container(
                width: 250,
                margin: const EdgeInsets.only(right: 16),
                child: Card(
                  elevation: 3,
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          quiz['title'] as String,
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFF5D4037),
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          quiz['description'] as String,
                          style: const TextStyle(
                            fontSize: 14,
                            color: Color(0xFF8D6E63),
                          ),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                        const SizedBox(height: 8),
                        Row(
                          children: [
                            _buildQuizTag(quiz['difficulty'] as String),
                            const SizedBox(width: 8),
                            _buildQuizTag('${quiz['questions']} Questions'),
                          ],
                        ),
                        const Spacer(),
                        SizedBox(
                          width: double.infinity,
                          child: ElevatedButton(
                            onPressed: () {
                              // Navigate to quiz
                              Navigator.pushNamed(context, '/quiz');
                            },
                            style: ElevatedButton.styleFrom(
                              padding: const EdgeInsets.symmetric(vertical: 8),
                            ),
                            child: const Text('Start Quiz'),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildQuizTag(String text) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: const Color(0xFFEFEBE9),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        text,
        style: const TextStyle(
          fontSize: 12,
          color: Color(0xFF5D4037),
        ),
      ),
    );
  }

  Widget _buildAchievementsSection(BuildContext context, UserModel user) {
    if (user.achievements.isEmpty) {
      return const SizedBox.shrink();
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Your Achievements',
          style: Theme.of(context).textTheme.displayMedium,
        ),
        const SizedBox(height: 16),
        GridView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            childAspectRatio: 1.5,
            crossAxisSpacing: 10,
            mainAxisSpacing: 10,
          ),
          itemCount: user.achievements.length,
          itemBuilder: (context, index) {
            final achievement = user.achievements[index];
            return Card(
              elevation: 2,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      achievement.icon == 'trophy' ? Icons.emoji_events : Icons.star,
                      size: 36,
                      color: const Color(0xFFD4AC0D),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      achievement.title,
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF5D4037),
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      achievement.description,
                      style: const TextStyle(
                        fontSize: 12,
                        color: Color(0xFF8D6E63),
                      ),
                      textAlign: TextAlign.center,
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ],
                ),
              ),
            );
          },
        ),
      ],
    );
  }
}
